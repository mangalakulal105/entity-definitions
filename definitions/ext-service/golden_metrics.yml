throughput:
  title: Throughput (req/sec)
  unit: REQUESTS_PER_SECOND
  queries:
    opentelemetry:
      select: rate(count(*), 1 second)
      from: Span
      where: span.kind LIKE 'server' OR span.kind LIKE 'consumer' OR kind LIKE 'server' OR kind LIKE 'consumer'
    kamon-agent:
      select: rate(sum(http.server.requests), 1 second) as 'count'
      from: Metric
    micrometer:
      select: rate(sum(http.server.requests), 1 second) as 'count'
      from: Metric
    pixie:
      select: rate(count(http.server.duration), 1 second)
      from: Metric
errorRate:
  title: Error rate (%)
  queries:
    opentelemetry:
      select: (filter(count(*), WHERE otel.status_code = 'ERROR') * 100) / count(*)
      from: Span
      where: span.kind LIKE 'server' OR span.kind LIKE 'consumer' OR kind LIKE 'server' OR kind LIKE 'consumer'
    kamon-agent:
      select: (filter(sum(http.server.requests), where http.status_code = '5xx') * 100) / sum(http.server.requests)
      from: Metric
    micrometer:
      select: (filter(sum(http.server.requests), where exception IS NOT NULL and exception != 'None') * 100) / sum(http.server.requests)
      from: Metric
    pixie:
      select: (filter(count(http.server.duration), where numeric(http.status_code) >= 400 AND numeric(http.status_code) != 404) * 100) / count(http.server.duration)
      from: Metric
responseTimeMs:
  title: Response time
  queries:
  unit: SECONDS
    opentelemetry:
      select: average(duration.ms) / 1000
      from: Span
      where: span.kind LIKE 'server' OR span.kind LIKE 'consumer' OR kind LIKE 'server' OR kind LIKE 'consumer'
    kamon-agent:
      select: average(http.server.requests) / 1000
      from: Metric
    micrometer:
      select: average(http.server.requests) / 1000
      from: Metric
    pixie:
      select: average(http.server.duration) / 1000
      from: Metric
